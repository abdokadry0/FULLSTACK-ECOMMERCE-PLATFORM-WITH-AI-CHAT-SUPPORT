// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  passwordHash   String    @map("password_hash")
  firstName      String?   @map("first_name")
  lastName       String?   @map("last_name")
  phone          String?
  emailVerified  Boolean   @default(false) @map("email_verified")
  stripeCustomerId String? @map("stripe_customer_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  addresses      Address[]
  cartItems      CartItem[]
  orders         Order[]
  reviews        ProductReview[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  imageUrl    String?   @map("image_url")
  parentId    Int?      @map("parent_id")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id                  Int       @id @default(autoincrement())
  name                String
  slug                String    @unique
  description         String?
  shortDescription    String?   @map("short_description")
  sku                 String?   @unique
  price               Decimal
  comparePrice        Decimal?  @map("compare_price")
  costPrice           Decimal?  @map("cost_price")
  inventoryQuantity   Int       @default(0) @map("inventory_quantity")
  trackInventory      Boolean   @default(true) @map("track_inventory")
  allowBackorders     Boolean   @default(false) @map("allow_backorders")
  weight              Decimal?
  categoryId          Int?      @map("category_id")
  isActive            Boolean   @default(true) @map("is_active")
  featured            Boolean   @default(false)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  category            Category? @relation(fields: [categoryId], references: [id])
  images              ProductImage[]
  cartItems           CartItem[]
  orderItems          OrderItem[]
  reviews             ProductReview[]

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  url       String
  altText   String? @map("alt_text")
  position  Int     @default(0)
  isPrimary Boolean @default(false) @map("is_primary")

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  type         String   @default("shipping") // 'shipping', 'billing'
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  company      String?
  addressLine1 String   @map("address_line1")
  addressLine2 String?  @map("address_line2")
  city         String
  state        String?
  postalCode   String   @map("postal_code")
  country      String
  phone        String?
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders    Order[] @relation("ShippingAddress")
  billingOrders     Order[] @relation("BillingAddress")

  @@map("addresses")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("user_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @map("user_id")
  orderNumber            String    @unique @map("order_number")
  status                 String    @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentStatus          String    @default("pending") @map("payment_status") // pending, paid, failed, refunded
  subtotal               Decimal
  taxAmount              Decimal   @default(0) @map("tax_amount")
  shippingAmount         Decimal   @default(0) @map("shipping_amount")
  totalAmount            Decimal   @map("total_amount")
  currency               String    @default("USD")
  paymentMethod          String?   @map("payment_method")
  stripePaymentIntentId  String?   @map("stripe_payment_intent_id")
  shippingAddressId      Int?      @map("shipping_address_id")
  billingAddressId       Int?      @map("billing_address_id")
  notes                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  shippingAddress Address?  @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?  @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  productId   Int     @map("product_id")
  quantity    Int
  unitPrice   Decimal @map("unit_price")
  totalPrice  Decimal @map("total_price")
  productName String? @map("product_name") // Store at time of purchase
  productSku  String? @map("product_sku")  // Store at time of purchase

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ProductReview {
  id               Int      @id @default(autoincrement())
  productId        Int      @map("product_id")
  userId           Int      @map("user_id")
  rating           Int      // 1-5 stars
  title            String?
  comment          String?
  verifiedPurchase Boolean  @default(false) @map("verified_purchase")
  isApproved       Boolean  @default(false) @map("is_approved")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
  @@map("product_reviews")
}